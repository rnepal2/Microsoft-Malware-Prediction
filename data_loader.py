import time
import pandas as pd

# Data Source: from kaggle Microsoft Malware Prediction competition
# https://www.kaggle.com/c/microsoft-malware-prediction/

# changing the columns data types into correct forms
# Thanks for doing this painstaking job to preapare the following dictionary:
# Ref: https://www.kaggle.com/theoviel/load-the-totality-of-the-data
dtypes = {
        'MachineIdentifier': 'category', 'ProductName': 'category', 'EngineVersion': 'category', 'AppVersion': 'category',
        'AvSigVersion': 'category', 'IsBeta': 'int8', 'RtpStateBitfield': 'float16', 'IsSxsPassiveMode': 'int8',
        'DefaultBrowsersIdentifier': 'float16', 'AVProductStatesIdentifier': 'float32', 'AVProductsInstalled': 'float16',
        'AVProductsEnabled': 'float16', 'HasTpm': 'int8', 'CountryIdentifier': 'int16', 'CityIdentifier': 'float32',
        'OrganizationIdentifier': 'float16', 'GeoNameIdentifier': 'float16', 'LocaleEnglishNameIdentifier': 'int16',
        'Platform': 'category', 'Processor': 'category', 'OsVer': 'category','OsBuild': 'int16', 'OsSuite': 'int16', 
        'OsPlatformSubRelease': 'category', 'OsBuildLab': 'category', 'SkuEdition':  'category','IsProtected': 'float16',
        'AutoSampleOptIn': 'int8','PuaMode': 'category', 'SMode': 'float16','IeVerIdentifier': 'float16',
        'SmartScreen': 'category','Firewall': 'float16','UacLuaenable': 'float32','Census_MDC2FormFactor': 'category',
        'Census_DeviceFamily': 'category','Census_OEMNameIdentifier': 'float16','Census_OEMModelIdentifier': 'float32',
        'Census_ProcessorCoreCount': 'float16','Census_ProcessorManufacturerIdentifier': 'float16',
        'Census_ProcessorModelIdentifier': 'float16','Census_ProcessorClass': 'category',
        'Census_PrimaryDiskTotalCapacity': 'float32', 'Census_PrimaryDiskTypeName': 'category',
        'Census_SystemVolumeTotalCapacity': 'float32', 'Census_HasOpticalDiskDrive': 'int8',
        'Census_TotalPhysicalRAM': 'float32', 'Census_ChassisTypeName': 'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches': 'float16', 'Census_InternalPrimaryDisplayResolutionHorizontal': 'float16',
        'Census_InternalPrimaryDisplayResolutionVertical': 'float16', 'Census_PowerPlatformRoleName': 'category',
        'Census_InternalBatteryType': 'category', 'Census_InternalBatteryNumberOfCharges': 'float32',
        'Census_OSVersion': 'category', 'Census_OSArchitecture': 'category', 'Census_OSBranch': 'category',
        'Census_OSBuildNumber': 'int16', 'Census_OSBuildRevision':  'int16', 'Census_OSEdition': 'category',
        'Census_OSSkuName': 'category', 'Census_OSInstallTypeName': 'category',
        'Census_OSInstallLanguageIdentifier': 'float16', 'Census_OSUILocaleIdentifier': 'int16',
        'Census_OSWUAutoUpdateOptionsName': 'category', 'Census_IsPortableOperatingSystem': 'int8',
        'Census_GenuineStateName': 'category', 'Census_ActivationChannel': 'category', 'Census_IsFlightingInternal': 'float16',
        'Census_IsFlightsDisabled': 'float16', 'Census_FlightRing': 'category', 'Census_ThresholdOptIn': 'float16',
        'Census_FirmwareManufacturerIdentifier': 'float16', 'Census_FirmwareVersionIdentifier': 'float32',
        'Census_IsSecureBootEnabled':  'int8', 'Census_IsWIMBootEnabled': 'float16', 'Census_IsVirtualDevice': 'float16',
        'Census_IsTouchEnabled': 'int8', 'Census_IsPenCapable': 'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable': 'float16', 'Wdft_IsGamer': 'float16', 'Wdft_RegionIdentifier': 'float16',
        'HasDetections': 'int8'
        }
		
# test_df columns dtypes
# removing 'HasDetections'
temp = dtypes.copy()
if temp['HasDetections']:
    del temp['HasDetections']
    test_dtypes = temp
    print('Target column from train_df is removed')


# loads and returns the train/test dataframes
def load_data():
	
	reply = input('dataset is huge, do you want to load whole dataset? (y/n): ')
	print('data column types are changed.')
	
	start = time.time()
	if reply.lower() == 'y':
		train_df = pd.read_csv('../input/train.csv', dtype=dtypes)
		test_df = pd.read_csv('../input/test.csv', dtype=test_dtypes)
		
	elif reply.lower() == 'n':
		num = input('Enter the number of rows to load: ')
		train_df = pd.read_csv('../input/train.csv', dtype=dtypes, nrows=num)
		test_df = pd.read_csv('../input/test.csv', dtype=test_dtypes, nrows=num)
	
	else:
		print('Enter correct form of input, y/n.')
		return
			
	delta = time.time() - start
	print('Data loading time: ', delta // 60, 'm', delta % 60, 's')
	
	return train_df, test_df











