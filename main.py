# @author: Rabindra Nepal

# libraries
import os
import time
import random 
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

from sklearn.model_selection import KFold
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import cross_validate
from sklearn.model_selection import RandomizedSearchCV,GridSearchCV,train_test_split
import lightgbm
from lightgbm import LGBMClassifier


# from local files: customized functions
from data_loader import load_data
from data_cleaning import DataCleaner
from features import engineer_features
from models import Model, Classifier



# load data
train_df, test_df = load_data()


def train_and_predict(train_df, test_df):

    # Data Cleaning
    # clean the data
    cleaner = DataCleaner()
    cleaner.columns_with_no_nan(train_df)
    cleaner.columns_with_no_nan(test_df)
    train_df = cleaner.drop_columns(train_df)
    train_df = cleaner.resolve_nan(train_df)
    test_df = cleaner.drop_columns(test_df)
    test_df = cleaner.resolve_nan(test_df)


    # features engineering
    train_df, test_df = engineer_features(train_df, test_df)

    # train the model from Model
    model = Classifier()
    model = model.model()

    # LabelEncoding/OneHotEncoding?
    train_df = model.encode(train_df)
    test_df = model.encode(test_df)

    # training progress and results
    model = model.train(model, train_df)

    # predict on test_df with predict method from Model
    y_test = model.predict(model, test_df)
    return y_test

if __name__ == "__main__":
    train_and_predict(train_df, test_df)